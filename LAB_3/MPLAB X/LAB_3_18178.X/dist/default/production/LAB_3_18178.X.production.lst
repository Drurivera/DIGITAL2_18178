

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Feb 08 10:22:43 2021

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 2.10
    23                           ; Generated 31/07/2019 GMT
    24                           ; 
    25                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F887 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  008F                     	;# 
   101  0090                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0093                     	;# 
   106  0093                     	;# 
   107  0094                     	;# 
   108  0095                     	;# 
   109  0096                     	;# 
   110  0097                     	;# 
   111  0098                     	;# 
   112  0099                     	;# 
   113  009A                     	;# 
   114  009B                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  009F                     	;# 
   119  0105                     	;# 
   120  0107                     	;# 
   121  0108                     	;# 
   122  0109                     	;# 
   123  010C                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  010F                     	;# 
   128  0185                     	;# 
   129  0187                     	;# 
   130  0188                     	;# 
   131  0189                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  0007                     	;# 
   142  0008                     	;# 
   143  0009                     	;# 
   144  000A                     	;# 
   145  000B                     	;# 
   146  000C                     	;# 
   147  000D                     	;# 
   148  000E                     	;# 
   149  000E                     	;# 
   150  000F                     	;# 
   151  0010                     	;# 
   152  0011                     	;# 
   153  0012                     	;# 
   154  0013                     	;# 
   155  0014                     	;# 
   156  0015                     	;# 
   157  0015                     	;# 
   158  0016                     	;# 
   159  0017                     	;# 
   160  0018                     	;# 
   161  0019                     	;# 
   162  001A                     	;# 
   163  001B                     	;# 
   164  001B                     	;# 
   165  001C                     	;# 
   166  001D                     	;# 
   167  001E                     	;# 
   168  001F                     	;# 
   169  0081                     	;# 
   170  0085                     	;# 
   171  0086                     	;# 
   172  0087                     	;# 
   173  0088                     	;# 
   174  0089                     	;# 
   175  008C                     	;# 
   176  008D                     	;# 
   177  008E                     	;# 
   178  008F                     	;# 
   179  0090                     	;# 
   180  0091                     	;# 
   181  0092                     	;# 
   182  0093                     	;# 
   183  0093                     	;# 
   184  0093                     	;# 
   185  0094                     	;# 
   186  0095                     	;# 
   187  0096                     	;# 
   188  0097                     	;# 
   189  0098                     	;# 
   190  0099                     	;# 
   191  009A                     	;# 
   192  009B                     	;# 
   193  009C                     	;# 
   194  009D                     	;# 
   195  009E                     	;# 
   196  009F                     	;# 
   197  0105                     	;# 
   198  0107                     	;# 
   199  0108                     	;# 
   200  0109                     	;# 
   201  010C                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  010F                     	;# 
   206  0185                     	;# 
   207  0187                     	;# 
   208  0188                     	;# 
   209  0189                     	;# 
   210  018C                     	;# 
   211  018D                     	;# 
   212  0000                     	;# 
   213  0001                     	;# 
   214  0002                     	;# 
   215  0003                     	;# 
   216  0004                     	;# 
   217  0005                     	;# 
   218  0006                     	;# 
   219  0007                     	;# 
   220  0008                     	;# 
   221  0009                     	;# 
   222  000A                     	;# 
   223  000B                     	;# 
   224  000C                     	;# 
   225  000D                     	;# 
   226  000E                     	;# 
   227  000E                     	;# 
   228  000F                     	;# 
   229  0010                     	;# 
   230  0011                     	;# 
   231  0012                     	;# 
   232  0013                     	;# 
   233  0014                     	;# 
   234  0015                     	;# 
   235  0015                     	;# 
   236  0016                     	;# 
   237  0017                     	;# 
   238  0018                     	;# 
   239  0019                     	;# 
   240  001A                     	;# 
   241  001B                     	;# 
   242  001B                     	;# 
   243  001C                     	;# 
   244  001D                     	;# 
   245  001E                     	;# 
   246  001F                     	;# 
   247  0081                     	;# 
   248  0085                     	;# 
   249  0086                     	;# 
   250  0087                     	;# 
   251  0088                     	;# 
   252  0089                     	;# 
   253  008C                     	;# 
   254  008D                     	;# 
   255  008E                     	;# 
   256  008F                     	;# 
   257  0090                     	;# 
   258  0091                     	;# 
   259  0092                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0093                     	;# 
   263  0094                     	;# 
   264  0095                     	;# 
   265  0096                     	;# 
   266  0097                     	;# 
   267  0098                     	;# 
   268  0099                     	;# 
   269  009A                     	;# 
   270  009B                     	;# 
   271  009C                     	;# 
   272  009D                     	;# 
   273  009E                     	;# 
   274  009F                     	;# 
   275  0105                     	;# 
   276  0107                     	;# 
   277  0108                     	;# 
   278  0109                     	;# 
   279  010C                     	;# 
   280  010C                     	;# 
   281  010D                     	;# 
   282  010E                     	;# 
   283  010F                     	;# 
   284  0185                     	;# 
   285  0187                     	;# 
   286  0188                     	;# 
   287  0189                     	;# 
   288  018C                     	;# 
   289  018D                     	;# 
   290  0005                     _PORTAbits	set	5
   291  0008                     _PORTDbits	set	8
   292  000B                     _INTCONbits	set	11
   293  0018                     _RCSTAbits	set	24
   294  0009                     _PORTE	set	9
   295  0008                     _PORTD	set	8
   296  0006                     _PORTB	set	6
   297  0005                     _PORTA	set	5
   298  001A                     _RCREG	set	26
   299  0019                     _TXREG	set	25
   300  000C                     _PIR1bits	set	12
   301  008C                     _PIE1bits	set	140
   302  0099                     _SPBRG	set	153
   303  0089                     _TRISE	set	137
   304  0088                     _TRISD	set	136
   305  0086                     _TRISB	set	134
   306  0085                     _TRISA	set	133
   307  0098                     _TXSTAbits	set	152
   308  0189                     _ANSELH	set	393
   309  0188                     _ANSEL	set	392
   310                           
   311                           	psect	strings
   312  0000'                    __pstrings:	
   313  0000'                    stringtab:	
   314  0000'                    __stringtab:	
   315  0000'                    stringcode:	
   316                           ;	String table - string pointers are 1 byte each
   317                           
   318  0000'                    stringdir:	
   319  0000' 3000'              	movlw	high stringdir
   320  0001' 008A               	movwf	10
   321  0002' 0804               	movf	4,w
   322  0003' 0A84               	incf	4,f
   323  0004' 0782               	addwf	2,f
   324  0005'                    __stringbase:	
   325  0005' 3400               	retlw	0
   326  0006'                    __end_of__stringtab:	
   327  0006'                    STR_3:	
   328  0006' 3444               	retlw	68	;'D'
   329  0007' 3465               	retlw	101	;'e'
   330  0008' 3476               	retlw	118	;'v'
   331  0009' 3465               	retlw	101	;'e'
   332  000A' 346C               	retlw	108	;'l'
   333  000B' 346F               	retlw	111	;'o'
   334  000C' 3470               	retlw	112	;'p'
   335  000D' 3465               	retlw	101	;'e'
   336  000E' 3464               	retlw	100	;'d'
   337  000F' 3420               	retlw	32	;' '
   338  0010' 3442               	retlw	66	;'B'
   339  0011' 3479               	retlw	121	;'y'
   340  0012' 3400               	retlw	0
   341  0013'                    STR_4:	
   342  0013' 3465               	retlw	101	;'e'
   343  0014' 346C               	retlw	108	;'l'
   344  0015' 3465               	retlw	101	;'e'
   345  0016' 3463               	retlw	99	;'c'
   346  0017' 3474               	retlw	116	;'t'
   347  0018' 3472               	retlw	114	;'r'
   348  0019' 346F               	retlw	111	;'o'
   349  001A' 3453               	retlw	83	;'S'
   350  001B' 346F               	retlw	111	;'o'
   351  001C' 346D               	retlw	109	;'m'
   352  001D' 3465               	retlw	101	;'e'
   353  001E' 3400               	retlw	0
   354  001F'                    STR_2:	
   355  001F' 3441               	retlw	65	;'A'
   356  0020' 3464               	retlw	100	;'d'
   357  0021' 3469               	retlw	105	;'i'
   358  0022' 346F               	retlw	111	;'o'
   359  0023' 3473               	retlw	115	;'s'
   360  0024' 3420               	retlw	32	;' '
   361  0025' 344D               	retlw	77	;'M'
   362  0026' 3475               	retlw	117	;'u'
   363  0027' 346E               	retlw	110	;'n'
   364  0028' 3464               	retlw	100	;'d'
   365  0029' 346F               	retlw	111	;'o'
   366  002A' 3400               	retlw	0
   367  002B'                    STR_1:	
   368  002B' 3448               	retlw	72	;'H'
   369  002C' 346F               	retlw	111	;'o'
   370  002D' 346C               	retlw	108	;'l'
   371  002E' 3461               	retlw	97	;'a'
   372  002F' 3420               	retlw	32	;' '
   373  0030' 344D               	retlw	77	;'M'
   374  0031' 3475               	retlw	117	;'u'
   375  0032' 346E               	retlw	110	;'n'
   376  0033' 3464               	retlw	100	;'d'
   377  0034' 346F               	retlw	111	;'o'
   378  0035' 3400               	retlw	0
   379                           
   380                           ; #config settings
   381  0000                     
   382                           	psect	cinit
   383  0000'                    start_initialization:	
   384  0000'                    __initialization:	
   385                           
   386                           ; Clear objects allocated to COMMON
   387  0000' 0180'              	clrf	__pbssCOMMON& (0+127)
   388  0001'                    end_of_initialization:	
   389                           ;End of C runtime variable initialization code
   390                           
   391  0001'                    __end_of__initialization:	
   392  0001' 0183               	clrf	3
   393  0002' 120A' 118A' 2800'  	ljmp	_main	;jump to C main() function
   394                           
   395                           	psect	bssCOMMON
   396  0000'                    __pbssCOMMON:	
   397  0000'                    _counter:	
   398  0000'                    	ds	1
   399                           
   400                           	psect	cstackCOMMON
   401  0000'                    __pcstackCOMMON:	
   402  0000'                    ?_setup:	
   403  0000'                    ?_UART_Init:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0000'                    ?_Lcd_Clear:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0000'                    ?_Lcd_Write_String:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0000'                    ?_Lcd_Shift_Left:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0000'                    ??_Lcd_Shift_Left:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0000'                    ?_Lcd_Shift_Right:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0000'                    ??_Lcd_Shift_Right:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0000'                    ?_Lcd_Write_Char:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0000'                    ?_ISR:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0000'                    ??_ISR:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0000'                    ?_main:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0000'                    ?_Lcd_Port:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0000'                    ?_Lcd_Cmd:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0000'                    Lcd_Write_Char@a:	
   443                           ; 1 bytes @ 0x0
   444                           
   445                           
   446                           ; 1 bytes @ 0x0
   447  0000'                    	ds	2
   448  0002'                    ??_setup:	
   449  0002'                    ??_UART_Init:	
   450                           ; 1 bytes @ 0x2
   451                           
   452  0002'                    ??_Lcd_Port:	
   453                           ; 1 bytes @ 0x2
   454                           
   455  0002'                    Lcd_Port@a:	
   456                           ; 1 bytes @ 0x2
   457                           
   458                           
   459                           ; 1 bytes @ 0x2
   460  0002'                    	ds	1
   461  0003'                    ??_Lcd_Write_Char:	
   462  0003'                    ??_Lcd_Cmd:	
   463                           ; 1 bytes @ 0x3
   464                           
   465                           
   466                           ; 1 bytes @ 0x3
   467  0003'                    	ds	1
   468  0004'                    Lcd_Write_Char@temp:	
   469                           
   470                           ; 1 bytes @ 0x4
   471  0004'                    	ds	1
   472  0005'                    ??_Lcd_Write_String:	
   473  0005'                    Lcd_Cmd@a:	
   474                           ; 1 bytes @ 0x5
   475                           
   476  0005'                    Lcd_Write_String@i:	
   477                           ; 1 bytes @ 0x5
   478                           
   479                           
   480                           ; 2 bytes @ 0x5
   481  0005'                    	ds	1
   482  0006'                    ??_Lcd_Clear:	
   483  0006'                    ?_Lcd_Set_Cursor:	
   484                           ; 1 bytes @ 0x6
   485                           
   486  0006'                    Lcd_Set_Cursor@b:	
   487                           ; 1 bytes @ 0x6
   488                           
   489                           
   490                           ; 1 bytes @ 0x6
   491  0006'                    	ds	1
   492  0007'                    ??_Lcd_Set_Cursor:	
   493  0007'                    Lcd_Write_String@a:	
   494                           ; 1 bytes @ 0x7
   495                           
   496                           
   497                           ; 1 bytes @ 0x7
   498  0007'                    	ds	2
   499  0009'                    main@a:	
   500                           
   501                           ; 2 bytes @ 0x9
   502  0009'                    	ds	2
   503                           
   504                           	psect	cstackBANK0
   505  0000'                    __pcstackBANK0:	
   506  0000'                    Lcd_Set_Cursor@a:	
   507                           
   508                           ; 1 bytes @ 0x0
   509  0000'                    	ds	1
   510  0001'                    Lcd_Set_Cursor@z:	
   511                           
   512                           ; 1 bytes @ 0x1
   513  0001'                    	ds	1
   514  0002'                    Lcd_Set_Cursor@y:	
   515                           
   516                           ; 1 bytes @ 0x2
   517  0002'                    	ds	1
   518  0003'                    Lcd_Set_Cursor@temp:	
   519                           
   520                           ; 1 bytes @ 0x3
   521  0003'                    	ds	1
   522  0004'                    ??_main:	
   523                           
   524                           ; 1 bytes @ 0x4
   525  0004'                    	ds	3
   526                           
   527                           	psect	maintext
   528  0000'                    __pmaintext:	
   529 ;;
   530 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   531 ;;
   532 ;; *************** function _main *****************
   533 ;; Defined at:
   534 ;;		line 84 in file "main.c"
   535 ;; Parameters:    Size  Location     Type
   536 ;;		None
   537 ;; Auto vars:     Size  Location     Type
   538 ;;  a               2    9[COMMON] unsigned int 
   539 ;; Return value:  Size  Location     Type
   540 ;;                  1    wreg      void 
   541 ;; Registers used:
   542 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   543 ;; Tracked objects:
   544 ;;		On entry : B00/0
   545 ;;		On exit  : 0/0
   546 ;;		Unchanged: 0/0
   547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   548 ;;      Params:         0       0       0       0       0
   549 ;;      Locals:         2       0       0       0       0
   550 ;;      Temps:          0       3       0       0       0
   551 ;;      Totals:         2       3       0       0       0
   552 ;;Total ram usage:        5 bytes
   553 ;; Hardware stack levels required when called:    4
   554 ;; This function calls:
   555 ;;		_Lcd_Clear
   556 ;;		_Lcd_Set_Cursor
   557 ;;		_Lcd_Shift_Left
   558 ;;		_Lcd_Shift_Right
   559 ;;		_Lcd_Write_Char
   560 ;;		_Lcd_Write_String
   561 ;;		_UART_Init
   562 ;;		_setup
   563 ;; This function is called by:
   564 ;;		Startup code after reset
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568                           
   569                           ;psect for function _main
   570  0000'                    _main:	
   571  0000'                    l1128:	
   572                           ;incstack = 0
   573                           ; Regs used in _main: [allreg]
   574                           
   575                           
   576                           ;main.c: 85:     unsigned int a;;main.c: 86:     setup();
   577  0000' 120A' 118A' 2000' 120A' 118A' 	fcall	_setup
   578                           
   579                           ;main.c: 88:     UART_Init();
   580  0005' 120A' 118A' 2000' 120A' 118A' 	fcall	_UART_Init
   581  000A'                    l70:	
   582                           ;main.c: 92:     while (1) {
   583                           
   584                           
   585                           ;main.c: 94:         Lcd_Clear();
   586  000A' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Clear
   587                           
   588                           ;main.c: 96:         Lcd_Set_Cursor(1, 1);
   589  000F' 0186'              	clrf	Lcd_Set_Cursor@b
   590  0010' 0A86'              	incf	Lcd_Set_Cursor@b,f
   591  0011' 3001               	movlw	1
   592  0012' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Set_Cursor
   593  0017'                    l1130:	
   594                           
   595                           ;main.c: 97:         Lcd_Write_String("Hola Mundo");
   596  0017' 3026               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   597  0018' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Write_String
   598  001D'                    l1132:	
   599                           
   600                           ;main.c: 100:         Lcd_Set_Cursor(2, 1);
   601  001D' 0186'              	clrf	Lcd_Set_Cursor@b
   602  001E' 0A86'              	incf	Lcd_Set_Cursor@b,f
   603  001F' 3002               	movlw	2
   604  0020' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Set_Cursor
   605                           
   606                           ;main.c: 101:         Lcd_Write_String("Adios Mundo");
   607  0025' 301A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   608  0026' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Write_String
   609  002B'                    l1134:	
   610                           
   611                           ;main.c: 102:         _delay((unsigned long)((2000)*(8000000/4000.0)));
   612  002B' 3015               	movlw	21
   613  002C' 1283               	bcf	3,5	;RP0=0, select bank0
   614  002D' 1303               	bcf	3,6	;RP1=0, select bank0
   615  002E' 0086'              	movwf	??_main+2
   616  002F' 304B               	movlw	75
   617  0030' 0085'              	movwf	??_main+1
   618  0031' 30BD               	movlw	189
   619  0032' 0084'              	movwf	??_main
   620  0033'                    u487:	
   621  0033' 0B84'              	decfsz	??_main,f
   622  0034' 2800'              	goto	u487
   623  0035' 0B85'              	decfsz	??_main+1,f
   624  0036' 2800'              	goto	u487
   625  0037' 0B86'              	decfsz	??_main+2,f
   626  0038' 2800'              	goto	u487
   627  0039' 2800'              	nop2
   628  003A'                    l1136:	
   629                           
   630                           ;main.c: 103:         Lcd_Clear();
   631  003A' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Clear
   632  003F'                    l1138:	
   633                           
   634                           ;main.c: 106:         Lcd_Set_Cursor(1, 1);
   635  003F' 0186'              	clrf	Lcd_Set_Cursor@b
   636  0040' 0A86'              	incf	Lcd_Set_Cursor@b,f
   637  0041' 3001               	movlw	1
   638  0042' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Set_Cursor
   639  0047'                    l1140:	
   640                           
   641                           ;main.c: 107:         Lcd_Write_String("Developed By");
   642  0047' 3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   643  0048' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Write_String
   644  004D'                    l1142:	
   645                           
   646                           ;main.c: 108:         Lcd_Set_Cursor(2, 1);
   647  004D' 0186'              	clrf	Lcd_Set_Cursor@b
   648  004E' 0A86'              	incf	Lcd_Set_Cursor@b,f
   649  004F' 3002               	movlw	2
   650  0050' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Set_Cursor
   651  0055'                    l1144:	
   652                           
   653                           ;main.c: 109:         Lcd_Write_String("electroSome");
   654  0055' 300E               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   655  0056' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Write_String
   656  005B'                    l1146:	
   657                           
   658                           ;main.c: 110:         _delay((unsigned long)((2000)*(8000000/4000.0)));
   659  005B' 3015               	movlw	21
   660  005C' 1283               	bcf	3,5	;RP0=0, select bank0
   661  005D' 1303               	bcf	3,6	;RP1=0, select bank0
   662  005E' 0086'              	movwf	??_main+2
   663  005F' 304B               	movlw	75
   664  0060' 0085'              	movwf	??_main+1
   665  0061' 30BD               	movlw	189
   666  0062' 0084'              	movwf	??_main
   667  0063'                    u497:	
   668  0063' 0B84'              	decfsz	??_main,f
   669  0064' 2800'              	goto	u497
   670  0065' 0B85'              	decfsz	??_main+1,f
   671  0066' 2800'              	goto	u497
   672  0067' 0B86'              	decfsz	??_main+2,f
   673  0068' 2800'              	goto	u497
   674  0069' 2800'              	nop2
   675  006A'                    l1148:	
   676                           
   677                           ;main.c: 111:         Lcd_Clear();
   678  006A' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Clear
   679  006F'                    l1150:	
   680                           
   681                           ;main.c: 118:         for (a = 0; a < 15; a++) {
   682  006F' 0189'              	clrf	main@a
   683  0070' 018A'              	clrf	main@a+1
   684  0071'                    l1156:	
   685                           
   686                           ;main.c: 119:             _delay((unsigned long)((300)*(8000000/4000.0)));
   687  0071' 3004               	movlw	4
   688  0072' 1283               	bcf	3,5	;RP0=0, select bank0
   689  0073' 1303               	bcf	3,6	;RP1=0, select bank0
   690  0074' 0086'              	movwf	??_main+2
   691  0075' 300C               	movlw	12
   692  0076' 0085'              	movwf	??_main+1
   693  0077' 3033               	movlw	51
   694  0078' 0084'              	movwf	??_main
   695  0079'                    u507:	
   696  0079' 0B84'              	decfsz	??_main,f
   697  007A' 2800'              	goto	u507
   698  007B' 0B85'              	decfsz	??_main+1,f
   699  007C' 2800'              	goto	u507
   700  007D' 0B86'              	decfsz	??_main+2,f
   701  007E' 2800'              	goto	u507
   702  007F'                    l1158:	
   703                           
   704                           ;main.c: 120:             Lcd_Shift_Left();
   705  007F' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Shift_Left
   706  0084'                    l1160:	
   707                           
   708                           ;main.c: 121:         }
   709  0084' 3001               	movlw	1
   710  0085' 0789'              	addwf	main@a,f
   711  0086' 1803               	skipnc
   712  0087' 0A8A'              	incf	main@a+1,f
   713  0088' 3000               	movlw	0
   714  0089' 078A'              	addwf	main@a+1,f
   715  008A'                    l1162:	
   716  008A' 3000               	movlw	0
   717  008B' 020A'              	subwf	main@a+1,w
   718  008C' 300F               	movlw	15
   719  008D' 1903               	skipnz
   720  008E' 0209'              	subwf	main@a,w
   721  008F' 1C03               	skipc
   722  0090' 2800'              	goto	u461
   723  0091' 2800'              	goto	u460
   724  0092'                    u461:	
   725  0092' 2800'              	goto	l1156
   726  0093'                    u460:	
   727  0093'                    l1164:	
   728                           
   729                           ;main.c: 123:         for (a = 0; a < 15; a++) {
   730  0093' 0189'              	clrf	main@a
   731  0094' 018A'              	clrf	main@a+1
   732  0095'                    l1170:	
   733                           
   734                           ;main.c: 124:             _delay((unsigned long)((300)*(8000000/4000.0)));
   735  0095' 3004               	movlw	4
   736  0096' 1283               	bcf	3,5	;RP0=0, select bank0
   737  0097' 1303               	bcf	3,6	;RP1=0, select bank0
   738  0098' 0086'              	movwf	??_main+2
   739  0099' 300C               	movlw	12
   740  009A' 0085'              	movwf	??_main+1
   741  009B' 3033               	movlw	51
   742  009C' 0084'              	movwf	??_main
   743  009D'                    u517:	
   744  009D' 0B84'              	decfsz	??_main,f
   745  009E' 2800'              	goto	u517
   746  009F' 0B85'              	decfsz	??_main+1,f
   747  00A0' 2800'              	goto	u517
   748  00A1' 0B86'              	decfsz	??_main+2,f
   749  00A2' 2800'              	goto	u517
   750  00A3'                    l1172:	
   751                           
   752                           ;main.c: 125:             Lcd_Shift_Right();
   753  00A3' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Shift_Right
   754  00A8'                    l1174:	
   755                           
   756                           ;main.c: 126:         }
   757  00A8' 3001               	movlw	1
   758  00A9' 0789'              	addwf	main@a,f
   759  00AA' 1803               	skipnc
   760  00AB' 0A8A'              	incf	main@a+1,f
   761  00AC' 3000               	movlw	0
   762  00AD' 078A'              	addwf	main@a+1,f
   763  00AE'                    l1176:	
   764  00AE' 3000               	movlw	0
   765  00AF' 020A'              	subwf	main@a+1,w
   766  00B0' 300F               	movlw	15
   767  00B1' 1903               	skipnz
   768  00B2' 0209'              	subwf	main@a,w
   769  00B3' 1C03               	skipc
   770  00B4' 2800'              	goto	u471
   771  00B5' 2800'              	goto	u470
   772  00B6'                    u471:	
   773  00B6' 2800'              	goto	l1170
   774  00B7'                    u470:	
   775  00B7'                    l1178:	
   776                           
   777                           ;main.c: 128:         Lcd_Clear();
   778  00B7' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Clear
   779                           
   780                           ;main.c: 129:         Lcd_Set_Cursor(2, 1);
   781  00BC' 0186'              	clrf	Lcd_Set_Cursor@b
   782  00BD' 0A86'              	incf	Lcd_Set_Cursor@b,f
   783  00BE' 3002               	movlw	2
   784  00BF' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Set_Cursor
   785                           
   786                           ;main.c: 130:         Lcd_Write_Char('M');
   787  00C4' 304D               	movlw	77
   788  00C5' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Write_Char
   789                           
   790                           ;main.c: 131:         Lcd_Write_Char('S');
   791  00CA' 3053               	movlw	83
   792  00CB' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Write_Char
   793  00D0'                    l1180:	
   794                           
   795                           ;main.c: 132:         _delay((unsigned long)((2000)*(8000000/4000.0)));
   796  00D0' 3015               	movlw	21
   797  00D1' 1283               	bcf	3,5	;RP0=0, select bank0
   798  00D2' 1303               	bcf	3,6	;RP1=0, select bank0
   799  00D3' 0086'              	movwf	??_main+2
   800  00D4' 304B               	movlw	75
   801  00D5' 0085'              	movwf	??_main+1
   802  00D6' 30BD               	movlw	189
   803  00D7' 0084'              	movwf	??_main
   804  00D8'                    u527:	
   805  00D8' 0B84'              	decfsz	??_main,f
   806  00D9' 2800'              	goto	u527
   807  00DA' 0B85'              	decfsz	??_main+1,f
   808  00DB' 2800'              	goto	u527
   809  00DC' 0B86'              	decfsz	??_main+2,f
   810  00DD' 2800'              	goto	u527
   811  00DE' 2800'              	nop2
   812  00DF' 2800'              	goto	l70
   813  00E0' 120A' 118A' 2800'  	ljmp	start
   814  00E3'                    __end_of_main:	
   815                           
   816                           	psect	text1
   817  0000'                    __ptext1:	
   818 ;; *************** function _setup *****************
   819 ;; Defined at:
   820 ;;		line 140 in file "main.c"
   821 ;; Parameters:    Size  Location     Type
   822 ;;		None
   823 ;; Auto vars:     Size  Location     Type
   824 ;;		None
   825 ;; Return value:  Size  Location     Type
   826 ;;                  1    wreg      void 
   827 ;; Registers used:
   828 ;;		wreg, status,2
   829 ;; Tracked objects:
   830 ;;		On entry : 0/0
   831 ;;		On exit  : 0/0
   832 ;;		Unchanged: 0/0
   833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   834 ;;      Params:         0       0       0       0       0
   835 ;;      Locals:         0       0       0       0       0
   836 ;;      Temps:          0       0       0       0       0
   837 ;;      Totals:         0       0       0       0       0
   838 ;;Total ram usage:        0 bytes
   839 ;; Hardware stack levels used:    1
   840 ;; Hardware stack levels required when called:    1
   841 ;; This function calls:
   842 ;;		Nothing
   843 ;; This function is called by:
   844 ;;		_main
   845 ;; This function uses a non-reentrant model
   846 ;;
   847                           
   848                           
   849                           ;psect for function _setup
   850  0000'                    _setup:	
   851  0000'                    l1076:	
   852                           ;incstack = 0
   853                           ; Regs used in _setup: [wreg+status,2]
   854                           
   855                           
   856                           ;main.c: 142:     ANSEL = 0;
   857  0000' 1683               	bsf	3,5	;RP0=1, select bank3
   858  0001' 1703               	bsf	3,6	;RP1=1, select bank3
   859  0002' 0188               	clrf	8	;volatile
   860  0003'                    l1078:	
   861                           
   862                           ;main.c: 143:     ANSELH = 0b00000001;
   863  0003' 3001               	movlw	1
   864  0004' 0089               	movwf	9	;volatile
   865  0005'                    l1080:	
   866                           
   867                           ;main.c: 144:     TRISA = 0;
   868  0005' 1683               	bsf	3,5	;RP0=1, select bank1
   869  0006' 1303               	bcf	3,6	;RP1=0, select bank1
   870  0007' 0185               	clrf	5	;volatile
   871  0008'                    l1082:	
   872                           
   873                           ;main.c: 145:     PORTA = 0;
   874  0008' 1283               	bcf	3,5	;RP0=0, select bank0
   875  0009' 1303               	bcf	3,6	;RP1=0, select bank0
   876  000A' 0185               	clrf	5	;volatile
   877  000B'                    l1084:	
   878                           
   879                           ;main.c: 146:     TRISB = 0b00000111;
   880  000B' 3007               	movlw	7
   881  000C' 1683               	bsf	3,5	;RP0=1, select bank1
   882  000D' 1303               	bcf	3,6	;RP1=0, select bank1
   883  000E' 0086               	movwf	6	;volatile
   884                           
   885                           ;main.c: 147:     PORTB = 0;
   886  000F' 1283               	bcf	3,5	;RP0=0, select bank0
   887  0010' 1303               	bcf	3,6	;RP1=0, select bank0
   888  0011' 0186               	clrf	6	;volatile
   889                           
   890                           ;main.c: 148:     TRISD = 0;
   891  0012' 1683               	bsf	3,5	;RP0=1, select bank1
   892  0013' 1303               	bcf	3,6	;RP1=0, select bank1
   893  0014' 0188               	clrf	8	;volatile
   894                           
   895                           ;main.c: 149:     PORTD = 0;
   896  0015' 1283               	bcf	3,5	;RP0=0, select bank0
   897  0016' 1303               	bcf	3,6	;RP1=0, select bank0
   898  0017' 0188               	clrf	8	;volatile
   899                           
   900                           ;main.c: 150:     TRISE = 0;
   901  0018' 1683               	bsf	3,5	;RP0=1, select bank1
   902  0019' 1303               	bcf	3,6	;RP1=0, select bank1
   903  001A' 0189               	clrf	9	;volatile
   904                           
   905                           ;main.c: 151:     PORTE = 0;
   906  001B' 1283               	bcf	3,5	;RP0=0, select bank0
   907  001C' 1303               	bcf	3,6	;RP1=0, select bank0
   908  001D' 0189               	clrf	9	;volatile
   909  001E'                    l80:	
   910  001E' 0008               	return
   911  001F'                    __end_of_setup:	
   912                           
   913                           	psect	text2
   914  0000'                    __ptext2:	
   915 ;; *************** function _UART_Init *****************
   916 ;; Defined at:
   917 ;;		line 158 in file "main.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;		None
   920 ;; Auto vars:     Size  Location     Type
   921 ;;		None
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   931 ;;      Params:         0       0       0       0       0
   932 ;;      Locals:         0       0       0       0       0
   933 ;;      Temps:          0       0       0       0       0
   934 ;;      Totals:         0       0       0       0       0
   935 ;;Total ram usage:        0 bytes
   936 ;; Hardware stack levels used:    1
   937 ;; Hardware stack levels required when called:    1
   938 ;; This function calls:
   939 ;;		Nothing
   940 ;; This function is called by:
   941 ;;		_main
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           
   946                           ;psect for function _UART_Init
   947  0000'                    _UART_Init:	
   948  0000'                    l1086:	
   949                           ;incstack = 0
   950                           ; Regs used in _UART_Init: [wreg]
   951                           
   952                           
   953                           ;main.c: 161:     TXSTAbits.TX9 = 0;
   954  0000' 1683               	bsf	3,5	;RP0=1, select bank1
   955  0001' 1303               	bcf	3,6	;RP1=0, select bank1
   956  0002' 1318               	bcf	24,6	;volatile
   957                           
   958                           ;main.c: 163:     TXSTAbits.TXEN = 1;
   959  0003' 1698               	bsf	24,5	;volatile
   960                           
   961                           ;main.c: 165:     TXSTAbits.SYNC = 0;
   962  0004' 1218               	bcf	24,4	;volatile
   963                           
   964                           ;main.c: 167:     TXSTAbits.BRGH = 0;
   965  0005' 1118               	bcf	24,2	;volatile
   966                           
   967                           ;main.c: 169:     RCSTAbits.SPEN = 1;
   968  0006' 1283               	bcf	3,5	;RP0=0, select bank0
   969  0007' 1303               	bcf	3,6	;RP1=0, select bank0
   970  0008' 1798               	bsf	24,7	;volatile
   971                           
   972                           ;main.c: 171:     RCSTAbits.CREN = 1;
   973  0009' 1618               	bsf	24,4	;volatile
   974  000A'                    l1088:	
   975                           
   976                           ;main.c: 174:     SPBRG = 11;
   977  000A' 300B               	movlw	11
   978  000B' 1683               	bsf	3,5	;RP0=1, select bank1
   979  000C' 1303               	bcf	3,6	;RP1=0, select bank1
   980  000D' 0099               	movwf	25	;volatile
   981  000E'                    l1090:	
   982                           
   983                           ;main.c: 177:     INTCONbits.GIE = 1;
   984  000E' 178B               	bsf	11,7	;volatile
   985  000F'                    l1092:	
   986                           
   987                           ;main.c: 179:     INTCONbits.PEIE = 1;
   988  000F' 170B               	bsf	11,6	;volatile
   989  0010'                    l1094:	
   990                           
   991                           ;main.c: 182:     PIE1bits.RCIE = 1;
   992  0010' 168C               	bsf	12,5	;volatile
   993  0011'                    l1096:	
   994                           
   995                           ;main.c: 184:     PIR1bits.RCIF = 0;
   996  0011' 1283               	bcf	3,5	;RP0=0, select bank0
   997  0012' 1303               	bcf	3,6	;RP1=0, select bank0
   998  0013' 128C               	bcf	12,5	;volatile
   999  0014'                    l83:	
  1000  0014' 0008               	return
  1001  0015'                    __end_of_UART_Init:	
  1002                           
  1003                           	psect	text3
  1004  0000'                    __ptext3:	
  1005 ;; *************** function _Lcd_Write_String *****************
  1006 ;; Defined at:
  1007 ;;		line 106 in file "LCD.c"
  1008 ;; Parameters:    Size  Location     Type
  1009 ;;  a               1    wreg     PTR unsigned char 
  1010 ;;		 -> STR_4(12), STR_3(13), STR_2(12), STR_1(11), 
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;  a               1    7[COMMON] PTR unsigned char 
  1013 ;;		 -> STR_4(12), STR_3(13), STR_2(12), STR_1(11), 
  1014 ;;  i               2    5[COMMON] int 
  1015 ;; Return value:  Size  Location     Type
  1016 ;;                  1    wreg      void 
  1017 ;; Registers used:
  1018 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1024 ;;      Params:         0       0       0       0       0
  1025 ;;      Locals:         3       0       0       0       0
  1026 ;;      Temps:          0       0       0       0       0
  1027 ;;      Totals:         3       0       0       0       0
  1028 ;;Total ram usage:        3 bytes
  1029 ;; Hardware stack levels used:    1
  1030 ;; Hardware stack levels required when called:    3
  1031 ;; This function calls:
  1032 ;;		_Lcd_Write_Char
  1033 ;; This function is called by:
  1034 ;;		_main
  1035 ;; This function uses a non-reentrant model
  1036 ;;
  1037                           
  1038                           
  1039                           ;psect for function _Lcd_Write_String
  1040  0000'                    _Lcd_Write_String:	
  1041                           
  1042                           ;incstack = 0
  1043                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1044                           ;Lcd_Write_String@a stored from wreg
  1045  0000' 0087'              	movwf	Lcd_Write_String@a
  1046  0001'                    l1120:	
  1047                           
  1048                           ;LCD.c: 107:     int i;;LCD.c: 108:     for (i = 0; a[i] != '\0'; i++)
  1049  0001' 0185'              	clrf	Lcd_Write_String@i
  1050  0002' 0186'              	clrf	Lcd_Write_String@i+1
  1051  0003' 2800'              	goto	l1126
  1052  0004'                    l1122:	
  1053                           
  1054                           ;LCD.c: 109:         Lcd_Write_Char(a[i]);
  1055  0004' 0805'              	movf	Lcd_Write_String@i,w
  1056  0005' 0707'              	addwf	Lcd_Write_String@a,w
  1057  0006' 0084               	movwf	4
  1058  0007' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  1059  000C' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Write_Char
  1060  0011'                    l1124:	
  1061  0011' 3001               	movlw	1
  1062  0012' 0785'              	addwf	Lcd_Write_String@i,f
  1063  0013' 1803               	skipnc
  1064  0014' 0A86'              	incf	Lcd_Write_String@i+1,f
  1065  0015' 3000               	movlw	0
  1066  0016' 0786'              	addwf	Lcd_Write_String@i+1,f
  1067  0017'                    l1126:	
  1068  0017' 0805'              	movf	Lcd_Write_String@i,w
  1069  0018' 0707'              	addwf	Lcd_Write_String@a,w
  1070  0019' 0084               	movwf	4
  1071  001A' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  1072  001F' 3A00               	xorlw	0
  1073  0020' 1D03               	skipz
  1074  0021' 2800'              	goto	u451
  1075  0022' 2800'              	goto	u450
  1076  0023'                    u451:	
  1077  0023' 2800'              	goto	l1122
  1078  0024'                    u450:	
  1079  0024'                    l132:	
  1080  0024' 0008               	return
  1081  0025'                    __end_of_Lcd_Write_String:	
  1082                           
  1083                           	psect	text4
  1084  0000'                    __ptext4:	
  1085 ;; *************** function _Lcd_Write_Char *****************
  1086 ;; Defined at:
  1087 ;;		line 97 in file "LCD.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;  a               1    wreg     unsigned char 
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;  a               1    0[COMMON] unsigned char 
  1092 ;;  temp            1    4[COMMON] unsigned char 
  1093 ;; Return value:  Size  Location     Type
  1094 ;;                  1    wreg      void 
  1095 ;; Registers used:
  1096 ;;		wreg, status,2, status,0, pclath, cstack
  1097 ;; Tracked objects:
  1098 ;;		On entry : 0/0
  1099 ;;		On exit  : 0/0
  1100 ;;		Unchanged: 0/0
  1101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1102 ;;      Params:         0       0       0       0       0
  1103 ;;      Locals:         1       0       0       0       0
  1104 ;;      Temps:          1       0       0       0       0
  1105 ;;      Totals:         2       0       0       0       0
  1106 ;;Total ram usage:        2 bytes
  1107 ;; Hardware stack levels used:    1
  1108 ;; Hardware stack levels required when called:    2
  1109 ;; This function calls:
  1110 ;;		_Lcd_Port
  1111 ;; This function is called by:
  1112 ;;		_main
  1113 ;;		_Lcd_Write_String
  1114 ;; This function uses a non-reentrant model
  1115 ;;
  1116                           
  1117                           
  1118                           ;psect for function _Lcd_Write_Char
  1119  0000'                    _Lcd_Write_Char:	
  1120  0000'                    l1056:	
  1121                           ;incstack = 0
  1122                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1123                           
  1124                           
  1125                           ;LCD.c: 98:     char temp;;LCD.c: 99:     PORTAbits.RA0 = 1;
  1126  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1127  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1128  0002' 1405               	bsf	5,0	;volatile
  1129  0003'                    l1058:	
  1130                           
  1131                           ;LCD.c: 100:     Lcd_Port(temp);
  1132  0003' 0804'              	movf	Lcd_Write_Char@temp,w
  1133  0004' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Port
  1134  0009'                    l1060:	
  1135                           
  1136                           ;LCD.c: 101:     PORTAbits.RA2 = 1;
  1137  0009' 1283               	bcf	3,5	;RP0=0, select bank0
  1138  000A' 1303               	bcf	3,6	;RP1=0, select bank0
  1139  000B' 1505               	bsf	5,2	;volatile
  1140  000C'                    l1062:	
  1141                           
  1142                           ;LCD.c: 102:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  1143  000C' 301A               	movlw	26
  1144  000D' 0083'              	movwf	??_Lcd_Write_Char
  1145  000E'                    u537:	
  1146  000E' 0B83'              	decfsz	??_Lcd_Write_Char,f
  1147  000F' 2800'              	goto	u537
  1148  0010' 0000               	nop
  1149  0011'                    l1064:	
  1150                           
  1151                           ;LCD.c: 103:     PORTAbits.RA2 = 0;
  1152  0011' 1283               	bcf	3,5	;RP0=0, select bank0
  1153  0012' 1303               	bcf	3,6	;RP1=0, select bank0
  1154  0013' 1105               	bcf	5,2	;volatile
  1155  0014'                    l126:	
  1156  0014' 0008               	return
  1157  0015'                    __end_of_Lcd_Write_Char:	
  1158                           
  1159                           	psect	text5
  1160  0000'                    __ptext5:	
  1161 ;; *************** function _Lcd_Set_Cursor *****************
  1162 ;; Defined at:
  1163 ;;		line 80 in file "LCD.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;  a               1    wreg     unsigned char 
  1166 ;;  b               1    6[COMMON] unsigned char 
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;  a               1    0[BANK0 ] unsigned char 
  1169 ;;  temp            1    3[BANK0 ] unsigned char 
  1170 ;;  y               1    2[BANK0 ] unsigned char 
  1171 ;;  z               1    1[BANK0 ] unsigned char 
  1172 ;; Return value:  Size  Location     Type
  1173 ;;                  1    wreg      void 
  1174 ;; Registers used:
  1175 ;;		wreg, status,2, status,0, pclath, cstack
  1176 ;; Tracked objects:
  1177 ;;		On entry : 0/0
  1178 ;;		On exit  : 0/0
  1179 ;;		Unchanged: 0/0
  1180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1181 ;;      Params:         1       0       0       0       0
  1182 ;;      Locals:         0       4       0       0       0
  1183 ;;      Temps:          2       0       0       0       0
  1184 ;;      Totals:         3       4       0       0       0
  1185 ;;Total ram usage:        7 bytes
  1186 ;; Hardware stack levels used:    1
  1187 ;; Hardware stack levels required when called:    3
  1188 ;; This function calls:
  1189 ;;		_Lcd_Cmd
  1190 ;; This function is called by:
  1191 ;;		_main
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195                           
  1196                           ;psect for function _Lcd_Set_Cursor
  1197  0000'                    _Lcd_Set_Cursor:	
  1198                           
  1199                           ;incstack = 0
  1200                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1201                           ;Lcd_Set_Cursor@a stored from wreg
  1202  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1203  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1204  0002' 0080'              	movwf	Lcd_Set_Cursor@a
  1205  0003'                    l1100:	
  1206                           
  1207                           ;LCD.c: 81:     char temp, z, y;;LCD.c: 82:     if (a == 1) {
  1208  0003' 0300'              	decf	Lcd_Set_Cursor@a,w
  1209  0004' 1D03               	btfss	3,2
  1210  0005' 2800'              	goto	u411
  1211  0006' 2800'              	goto	u410
  1212  0007'                    u411:	
  1213  0007' 2800'              	goto	l1110
  1214  0008'                    u410:	
  1215  0008'                    l1102:	
  1216                           
  1217                           ;LCD.c: 83:         temp = 0x80 + b - 1;
  1218  0008' 0806'              	movf	Lcd_Set_Cursor@b,w
  1219  0009' 3E7F               	addlw	127
  1220  000A' 0087'              	movwf	??_Lcd_Set_Cursor
  1221  000B' 0807'              	movf	??_Lcd_Set_Cursor,w
  1222  000C' 0083'              	movwf	Lcd_Set_Cursor@temp
  1223                           
  1224                           ;LCD.c: 84:         z = temp >> 4;
  1225  000D' 0803'              	movf	Lcd_Set_Cursor@temp,w
  1226  000E' 0087'              	movwf	??_Lcd_Set_Cursor
  1227  000F' 3004               	movlw	4
  1228  0010'                    u425:	
  1229  0010' 1003               	clrc
  1230  0011' 0C87'              	rrf	??_Lcd_Set_Cursor,f
  1231  0012' 3EFF               	addlw	-1
  1232  0013' 1D03               	skipz
  1233  0014' 2800'              	goto	u425
  1234  0015' 0807'              	movf	??_Lcd_Set_Cursor,w
  1235  0016' 0088'              	movwf	??_Lcd_Set_Cursor+1
  1236  0017' 0808'              	movf	??_Lcd_Set_Cursor+1,w
  1237  0018' 0081'              	movwf	Lcd_Set_Cursor@z
  1238  0019'                    l1104:	
  1239                           
  1240                           ;LCD.c: 85:         y = temp & 0x0F;
  1241  0019' 0803'              	movf	Lcd_Set_Cursor@temp,w
  1242  001A' 390F               	andlw	15
  1243  001B' 0087'              	movwf	??_Lcd_Set_Cursor
  1244  001C' 0807'              	movf	??_Lcd_Set_Cursor,w
  1245  001D' 0082'              	movwf	Lcd_Set_Cursor@y
  1246  001E'                    l1106:	
  1247                           
  1248                           ;LCD.c: 86:         Lcd_Cmd(z);
  1249  001E' 0801'              	movf	Lcd_Set_Cursor@z,w
  1250  001F' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Cmd
  1251  0024'                    l1108:	
  1252                           
  1253                           ;LCD.c: 87:         Lcd_Cmd (y);
  1254  0024' 1283               	bcf	3,5	;RP0=0, select bank0
  1255  0025' 1303               	bcf	3,6	;RP1=0, select bank0
  1256  0026' 0802'              	movf	Lcd_Set_Cursor@y,w
  1257  0027' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Cmd
  1258                           
  1259                           ;LCD.c: 88:     }else if (a == 2) {
  1260  002C' 2800'              	goto	l123
  1261  002D'                    l1110:	
  1262  002D' 3002               	movlw	2
  1263  002E' 0600'              	xorwf	Lcd_Set_Cursor@a,w
  1264  002F' 1D03               	btfss	3,2
  1265  0030' 2800'              	goto	u431
  1266  0031' 2800'              	goto	u430
  1267  0032'                    u431:	
  1268  0032' 2800'              	goto	l123
  1269  0033'                    u430:	
  1270  0033'                    l1112:	
  1271                           
  1272                           ;LCD.c: 89:         temp = 0xC0 + b - 1;
  1273  0033' 0806'              	movf	Lcd_Set_Cursor@b,w
  1274  0034' 3EBF               	addlw	191
  1275  0035' 0087'              	movwf	??_Lcd_Set_Cursor
  1276  0036' 0807'              	movf	??_Lcd_Set_Cursor,w
  1277  0037' 0083'              	movwf	Lcd_Set_Cursor@temp
  1278                           
  1279                           ;LCD.c: 90:         z = temp >> 4;
  1280  0038' 0803'              	movf	Lcd_Set_Cursor@temp,w
  1281  0039' 0087'              	movwf	??_Lcd_Set_Cursor
  1282  003A' 3004               	movlw	4
  1283  003B'                    u445:	
  1284  003B' 1003               	clrc
  1285  003C' 0C87'              	rrf	??_Lcd_Set_Cursor,f
  1286  003D' 3EFF               	addlw	-1
  1287  003E' 1D03               	skipz
  1288  003F' 2800'              	goto	u445
  1289  0040' 0807'              	movf	??_Lcd_Set_Cursor,w
  1290  0041' 0088'              	movwf	??_Lcd_Set_Cursor+1
  1291  0042' 0808'              	movf	??_Lcd_Set_Cursor+1,w
  1292  0043' 0081'              	movwf	Lcd_Set_Cursor@z
  1293  0044'                    l1114:	
  1294                           
  1295                           ;LCD.c: 91:         y = temp & 0x0F;
  1296  0044' 0803'              	movf	Lcd_Set_Cursor@temp,w
  1297  0045' 390F               	andlw	15
  1298  0046' 0087'              	movwf	??_Lcd_Set_Cursor
  1299  0047' 0807'              	movf	??_Lcd_Set_Cursor,w
  1300  0048' 0082'              	movwf	Lcd_Set_Cursor@y
  1301  0049'                    l1116:	
  1302                           
  1303                           ;LCD.c: 92:         Lcd_Cmd(z);
  1304  0049' 0801'              	movf	Lcd_Set_Cursor@z,w
  1305  004A' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Cmd
  1306  004F'                    l1118:	
  1307                           
  1308                           ;LCD.c: 93:         Lcd_Cmd (y);
  1309  004F' 1283               	bcf	3,5	;RP0=0, select bank0
  1310  0050' 1303               	bcf	3,6	;RP1=0, select bank0
  1311  0051' 0802'              	movf	Lcd_Set_Cursor@y,w
  1312  0052' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Cmd
  1313  0057'                    l123:	
  1314  0057' 0008               	return
  1315  0058'                    __end_of_Lcd_Set_Cursor:	
  1316                           
  1317                           	psect	text6
  1318  0000'                    __ptext6:	
  1319 ;; *************** function _Lcd_Clear *****************
  1320 ;; Defined at:
  1321 ;;		line 61 in file "LCD.c"
  1322 ;; Parameters:    Size  Location     Type
  1323 ;;		None
  1324 ;; Auto vars:     Size  Location     Type
  1325 ;;		None
  1326 ;; Return value:  Size  Location     Type
  1327 ;;                  1    wreg      void 
  1328 ;; Registers used:
  1329 ;;		wreg, status,2, status,0, pclath, cstack
  1330 ;; Tracked objects:
  1331 ;;		On entry : 0/0
  1332 ;;		On exit  : 0/0
  1333 ;;		Unchanged: 0/0
  1334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1335 ;;      Params:         0       0       0       0       0
  1336 ;;      Locals:         0       0       0       0       0
  1337 ;;      Temps:          0       0       0       0       0
  1338 ;;      Totals:         0       0       0       0       0
  1339 ;;Total ram usage:        0 bytes
  1340 ;; Hardware stack levels used:    1
  1341 ;; Hardware stack levels required when called:    3
  1342 ;; This function calls:
  1343 ;;		_Lcd_Cmd
  1344 ;; This function is called by:
  1345 ;;		_main
  1346 ;; This function uses a non-reentrant model
  1347 ;;
  1348                           
  1349                           
  1350                           ;psect for function _Lcd_Clear
  1351  0000'                    _Lcd_Clear:	
  1352  0000'                    l1098:	
  1353                           ;incstack = 0
  1354                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1355                           
  1356                           
  1357                           ;LCD.c: 62:     Lcd_Cmd(0);
  1358  0000' 3000               	movlw	0
  1359  0001' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Cmd
  1360                           
  1361                           ;LCD.c: 63:     Lcd_Cmd(1);
  1362  0006' 3001               	movlw	1
  1363  0007' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Cmd
  1364  000C'                    l114:	
  1365  000C' 0008               	return
  1366  000D'                    __end_of_Lcd_Clear:	
  1367                           
  1368                           	psect	text7
  1369  0000'                    __ptext7:	
  1370 ;; *************** function _Lcd_Cmd *****************
  1371 ;; Defined at:
  1372 ;;		line 53 in file "LCD.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;  a               1    wreg     unsigned char 
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;  a               1    5[COMMON] unsigned char 
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      void 
  1379 ;; Registers used:
  1380 ;;		wreg, status,2, status,0, pclath, cstack
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1386 ;;      Params:         0       0       0       0       0
  1387 ;;      Locals:         1       0       0       0       0
  1388 ;;      Temps:          2       0       0       0       0
  1389 ;;      Totals:         3       0       0       0       0
  1390 ;;Total ram usage:        3 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; Hardware stack levels required when called:    2
  1393 ;; This function calls:
  1394 ;;		_Lcd_Port
  1395 ;; This function is called by:
  1396 ;;		_Lcd_Clear
  1397 ;;		_Lcd_Set_Cursor
  1398 ;;		_Lcd_Init
  1399 ;; This function uses a non-reentrant model
  1400 ;;
  1401                           
  1402                           
  1403                           ;psect for function _Lcd_Cmd
  1404  0000'                    _Lcd_Cmd:	
  1405                           
  1406                           ;incstack = 0
  1407                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1408                           ;Lcd_Cmd@a stored from wreg
  1409  0000' 0085'              	movwf	Lcd_Cmd@a
  1410  0001'                    l1066:	
  1411                           
  1412                           ;LCD.c: 54:     PORTAbits.RA0 = 0;
  1413  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  1414  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  1415  0003' 1005               	bcf	5,0	;volatile
  1416  0004'                    l1068:	
  1417                           
  1418                           ;LCD.c: 55:     Lcd_Port (a);
  1419  0004' 0805'              	movf	Lcd_Cmd@a,w
  1420  0005' 120A' 118A' 2000' 120A' 118A' 	fcall	_Lcd_Port
  1421  000A'                    l1070:	
  1422                           
  1423                           ;LCD.c: 56:     PORTAbits.RA2 = 1;
  1424  000A' 1283               	bcf	3,5	;RP0=0, select bank0
  1425  000B' 1303               	bcf	3,6	;RP1=0, select bank0
  1426  000C' 1505               	bsf	5,2	;volatile
  1427  000D'                    l1072:	
  1428                           
  1429                           ;LCD.c: 57:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1430  000D' 300D               	movlw	13
  1431  000E' 0084'              	movwf	??_Lcd_Cmd+1
  1432  000F' 30FB               	movlw	251
  1433  0010' 0083'              	movwf	??_Lcd_Cmd
  1434  0011'                    u547:	
  1435  0011' 0B83'              	decfsz	??_Lcd_Cmd,f
  1436  0012' 2800'              	goto	u547
  1437  0013' 0B84'              	decfsz	??_Lcd_Cmd+1,f
  1438  0014' 2800'              	goto	u547
  1439  0015' 2800'              	nop2
  1440  0016'                    l1074:	
  1441                           
  1442                           ;LCD.c: 58:     PORTAbits.RA2 = 0;
  1443  0016' 1283               	bcf	3,5	;RP0=0, select bank0
  1444  0017' 1303               	bcf	3,6	;RP1=0, select bank0
  1445  0018' 1105               	bcf	5,2	;volatile
  1446  0019'                    l111:	
  1447  0019' 0008               	return
  1448  001A'                    __end_of_Lcd_Cmd:	
  1449                           
  1450                           	psect	text8
  1451  0000'                    __ptext8:	
  1452 ;; *************** function _Lcd_Port *****************
  1453 ;; Defined at:
  1454 ;;		line 11 in file "LCD.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;  a               1    wreg     unsigned char 
  1457 ;; Auto vars:     Size  Location     Type
  1458 ;;  a               1    2[COMMON] unsigned char 
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  1    wreg      void 
  1461 ;; Registers used:
  1462 ;;		wreg
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1468 ;;      Params:         0       0       0       0       0
  1469 ;;      Locals:         1       0       0       0       0
  1470 ;;      Temps:          0       0       0       0       0
  1471 ;;      Totals:         1       0       0       0       0
  1472 ;;Total ram usage:        1 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; Hardware stack levels required when called:    1
  1475 ;; This function calls:
  1476 ;;		Nothing
  1477 ;; This function is called by:
  1478 ;;		_Lcd_Cmd
  1479 ;;		_Lcd_Write_Char
  1480 ;;		_Lcd_Init
  1481 ;; This function uses a non-reentrant model
  1482 ;;
  1483                           
  1484                           
  1485                           ;psect for function _Lcd_Port
  1486  0000'                    _Lcd_Port:	
  1487                           
  1488                           ;incstack = 0
  1489                           ; Regs used in _Lcd_Port: [wreg]
  1490                           ;Lcd_Port@a stored from wreg
  1491  0000' 0082'              	movwf	Lcd_Port@a
  1492  0001'                    l1038:	
  1493                           
  1494                           ;LCD.c: 12:     if (a & 1)
  1495  0001' 1C02'              	btfss	Lcd_Port@a,0
  1496  0002' 2800'              	goto	u331
  1497  0003' 2800'              	goto	u330
  1498  0004'                    u331:	
  1499  0004' 2800'              	goto	l92
  1500  0005'                    u330:	
  1501  0005'                    l1040:	
  1502                           
  1503                           ;LCD.c: 13:         PORTDbits.RD0 = 1;
  1504  0005' 1283               	bcf	3,5	;RP0=0, select bank0
  1505  0006' 1303               	bcf	3,6	;RP1=0, select bank0
  1506  0007' 1408               	bsf	8,0	;volatile
  1507  0008' 2800'              	goto	l93
  1508  0009'                    l92:	
  1509                           ;LCD.c: 14:     else
  1510                           
  1511                           
  1512                           ;LCD.c: 15:         PORTDbits.RD0 = 0;
  1513  0009' 1283               	bcf	3,5	;RP0=0, select bank0
  1514  000A' 1303               	bcf	3,6	;RP1=0, select bank0
  1515  000B' 1008               	bcf	8,0	;volatile
  1516  000C'                    l93:	
  1517                           
  1518                           ;LCD.c: 17:     if (a & 2)
  1519  000C' 1C82'              	btfss	Lcd_Port@a,1
  1520  000D' 2800'              	goto	u341
  1521  000E' 2800'              	goto	u340
  1522  000F'                    u341:	
  1523  000F' 2800'              	goto	l94
  1524  0010'                    u340:	
  1525  0010'                    l1042:	
  1526                           
  1527                           ;LCD.c: 18:         PORTDbits.RD1 = 1;
  1528  0010' 1488               	bsf	8,1	;volatile
  1529  0011' 2800'              	goto	l95
  1530  0012'                    l94:	
  1531                           ;LCD.c: 19:     else
  1532                           
  1533                           
  1534                           ;LCD.c: 20:         PORTDbits.RD1 = 0;
  1535  0012' 1088               	bcf	8,1	;volatile
  1536  0013'                    l95:	
  1537                           
  1538                           ;LCD.c: 22:     if (a & 4)
  1539  0013' 1D02'              	btfss	Lcd_Port@a,2
  1540  0014' 2800'              	goto	u351
  1541  0015' 2800'              	goto	u350
  1542  0016'                    u351:	
  1543  0016' 2800'              	goto	l96
  1544  0017'                    u350:	
  1545  0017'                    l1044:	
  1546                           
  1547                           ;LCD.c: 23:         PORTDbits.RD2 = 1;
  1548  0017' 1508               	bsf	8,2	;volatile
  1549  0018' 2800'              	goto	l97
  1550  0019'                    l96:	
  1551                           ;LCD.c: 24:     else
  1552                           
  1553                           
  1554                           ;LCD.c: 25:         PORTDbits.RD2 = 0;
  1555  0019' 1108               	bcf	8,2	;volatile
  1556  001A'                    l97:	
  1557                           
  1558                           ;LCD.c: 27:     if (a & 8)
  1559  001A' 1D82'              	btfss	Lcd_Port@a,3
  1560  001B' 2800'              	goto	u361
  1561  001C' 2800'              	goto	u360
  1562  001D'                    u361:	
  1563  001D' 2800'              	goto	l98
  1564  001E'                    u360:	
  1565  001E'                    l1046:	
  1566                           
  1567                           ;LCD.c: 28:         PORTDbits.RD3 = 1;
  1568  001E' 1588               	bsf	8,3	;volatile
  1569  001F' 2800'              	goto	l99
  1570  0020'                    l98:	
  1571                           ;LCD.c: 29:     else
  1572                           
  1573                           
  1574                           ;LCD.c: 30:         PORTDbits.RD3 = 0;
  1575  0020' 1188               	bcf	8,3	;volatile
  1576  0021'                    l99:	
  1577                           
  1578                           ;LCD.c: 32:     if (a & 16)
  1579  0021' 1E02'              	btfss	Lcd_Port@a,4
  1580  0022' 2800'              	goto	u371
  1581  0023' 2800'              	goto	u370
  1582  0024'                    u371:	
  1583  0024' 2800'              	goto	l100
  1584  0025'                    u370:	
  1585  0025'                    l1048:	
  1586                           
  1587                           ;LCD.c: 33:         PORTDbits.RD4 = 1;
  1588  0025' 1608               	bsf	8,4	;volatile
  1589  0026' 2800'              	goto	l101
  1590  0027'                    l100:	
  1591                           ;LCD.c: 34:     else
  1592                           
  1593                           
  1594                           ;LCD.c: 35:         PORTDbits.RD4 = 0;
  1595  0027' 1208               	bcf	8,4	;volatile
  1596  0028'                    l101:	
  1597                           
  1598                           ;LCD.c: 37:     if (a & 32)
  1599  0028' 1E82'              	btfss	Lcd_Port@a,5
  1600  0029' 2800'              	goto	u381
  1601  002A' 2800'              	goto	u380
  1602  002B'                    u381:	
  1603  002B' 2800'              	goto	l102
  1604  002C'                    u380:	
  1605  002C'                    l1050:	
  1606                           
  1607                           ;LCD.c: 38:         PORTDbits.RD5 = 1;
  1608  002C' 1688               	bsf	8,5	;volatile
  1609  002D' 2800'              	goto	l103
  1610  002E'                    l102:	
  1611                           ;LCD.c: 39:     else
  1612                           
  1613                           
  1614                           ;LCD.c: 40:         PORTDbits.RD5 = 0;
  1615  002E' 1288               	bcf	8,5	;volatile
  1616  002F'                    l103:	
  1617                           
  1618                           ;LCD.c: 42:     if (a & 64)
  1619  002F' 1F02'              	btfss	Lcd_Port@a,6
  1620  0030' 2800'              	goto	u391
  1621  0031' 2800'              	goto	u390
  1622  0032'                    u391:	
  1623  0032' 2800'              	goto	l104
  1624  0033'                    u390:	
  1625  0033'                    l1052:	
  1626                           
  1627                           ;LCD.c: 43:         PORTDbits.RD6 = 1;
  1628  0033' 1708               	bsf	8,6	;volatile
  1629  0034' 2800'              	goto	l105
  1630  0035'                    l104:	
  1631                           ;LCD.c: 44:     else
  1632                           
  1633                           
  1634                           ;LCD.c: 45:         PORTDbits.RD6 = 0;
  1635  0035' 1308               	bcf	8,6	;volatile
  1636  0036'                    l105:	
  1637                           
  1638                           ;LCD.c: 47:     if (a & 128)
  1639  0036' 1F82'              	btfss	Lcd_Port@a,7
  1640  0037' 2800'              	goto	u401
  1641  0038' 2800'              	goto	u400
  1642  0039'                    u401:	
  1643  0039' 2800'              	goto	l106
  1644  003A'                    u400:	
  1645  003A'                    l1054:	
  1646                           
  1647                           ;LCD.c: 48:         PORTDbits.RD7 = 1;
  1648  003A' 1788               	bsf	8,7	;volatile
  1649  003B' 2800'              	goto	l108
  1650  003C'                    l106:	
  1651                           ;LCD.c: 49:     else
  1652                           
  1653                           
  1654                           ;LCD.c: 50:         PORTDbits.RD7 = 0;
  1655  003C' 1388               	bcf	8,7	;volatile
  1656  003D'                    l108:	
  1657  003D' 0008               	return
  1658  003E'                    __end_of_Lcd_Port:	
  1659                           
  1660                           	psect	text9
  1661  0000'                    __ptext9:	
  1662 ;; *************** function _ISR *****************
  1663 ;; Defined at:
  1664 ;;		line 61 in file "main.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;		None
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;		None
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      void 
  1671 ;; Registers used:
  1672 ;;		wreg, status,2, status,0
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1678 ;;      Params:         0       0       0       0       0
  1679 ;;      Locals:         0       0       0       0       0
  1680 ;;      Temps:          2       0       0       0       0
  1681 ;;      Totals:         2       0       0       0       0
  1682 ;;Total ram usage:        2 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; This function calls:
  1685 ;;		Nothing
  1686 ;; This function is called by:
  1687 ;;		Interrupt level 1
  1688 ;; This function uses a non-reentrant model
  1689 ;;
  1690                           
  1691                           
  1692                           ;psect for function _ISR
  1693  0000'                    _ISR:	
  1694  0000'                    i1l814:	
  1695                           
  1696                           ;main.c: 64:     if (PIR1bits.RCIF == 1)
  1697  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1698  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1699  0002' 1E8C               	btfss	12,5	;volatile
  1700  0003' 2800'              	goto	u14_21
  1701  0004' 2800'              	goto	u14_20
  1702  0005'                    u14_21:	
  1703  0005' 2800'              	goto	i1l65
  1704  0006'                    u14_20:	
  1705  0006'                    i1l816:	
  1706                           
  1707                           ;main.c: 65:     {;main.c: 67:         PIR1bits.RCIF = 0;
  1708  0006' 128C               	bcf	12,5	;volatile
  1709  0007'                    i1l818:	
  1710                           
  1711                           ;main.c: 68:         TXREG = (RCREG + 1);
  1712  0007' 081A               	movf	26,w	;volatile
  1713  0008' 3E01               	addlw	1
  1714  0009' 0099               	movwf	25	;volatile
  1715  000A'                    i1l62:	
  1716                           ;main.c: 69:         while (TXSTAbits.TRMT == 0);
  1717                           
  1718  000A' 1683               	bsf	3,5	;RP0=1, select bank1
  1719  000B' 1303               	bcf	3,6	;RP1=0, select bank1
  1720  000C' 1C98               	btfss	24,1	;volatile
  1721  000D' 2800'              	goto	u15_21
  1722  000E' 2800'              	goto	u15_20
  1723  000F'                    u15_21:	
  1724  000F' 2800'              	goto	i1l62
  1725  0010'                    u15_20:	
  1726  0010'                    i1l65:	
  1727  0010' 0801'              	movf	??_ISR+1,w
  1728  0011' 008A               	movwf	10
  1729  0012' 0E00'              	swapf	??_ISR^(0+4294967168),w
  1730  0013' 0083               	movwf	3
  1731  0014' 0EFE               	swapf	btemp,f
  1732  0015' 0E7E               	swapf	btemp,w
  1733  0016' 0009               	retfie
  1734  0017'                    __end_of_ISR:	
  1735  007E                     btemp	set	126	;btemp
  1736  007E                     wtemp0	set	126
  1737                           
  1738                           	psect	intentry
  1739  0000'                    __pintentry:	
  1740                           ;incstack = 0
  1741                           ; Regs used in _ISR: [wreg+status,2+status,0]
  1742                           
  1743  0000'                    interrupt_function:	
  1744  007E                     saved_w	set	btemp
  1745  0000' 00FE               	movwf	btemp
  1746  0001' 0E03               	swapf	3,w
  1747  0002' 0080'              	movwf	??_ISR
  1748  0003' 080A               	movf	10,w
  1749  0004' 0081'              	movwf	??_ISR+1
  1750  0005' 120A' 118A' 2800'  	ljmp	_ISR


Data Sizes:
    Strings     48
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      12
    BANK0            80      7       7
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 13
		 -> STR_4(CODE[12]), STR_3(CODE[13]), STR_2(CODE[12]), STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Set_Cursor

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    2366
                                              9 COMMON     2     2      0
                                              4 BANK0      3     3      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
                     _Lcd_Write_Char
                   _Lcd_Write_String
                          _UART_Init
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     553
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     279
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    1119
                                              6 COMMON     3     2      1
                                              0 BANK0      4     4      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     279
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     279
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     248
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
   _Lcd_Shift_Right
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_Init
   _setup

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      13       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      7       7       5        8.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      13      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Feb 08 10:22:43 2021

                        pc 0002                __CFG_CP$OFF 0000                         l70 000A  
                       l80 001E                         l83 0014                         l92 0009  
                       l93 000C                         l94 0012                         l95 0013  
                       l96 0019                         l97 001A                         l98 0020  
                       l99 0021                         fsr 0004                        l100 0027  
                      l101 0028                        l102 002E                        l103 002F  
                      l111 0019                        l104 0035                        l105 0036  
                      l106 003C                        l114 000C                        l123 0057  
                      l108 003D                        l132 0024                        l126 0014  
                      u400 003A                        u401 0039                        u330 0005  
                      u410 0008                        u331 0004                        u411 0007  
                      u340 0010                        u341 000F                        u350 0017  
                      u430 0033                        u351 0016                        u431 0032  
                      u360 001E                        u361 001D                        u425 0010  
                      u370 0025                        u450 0024               __CFG_CPD$OFF 0000  
                      u371 0024                        u451 0023                        u507 0079  
                      u380 002C                        u460 0093                        _ISR 0000  
                      u381 002B                        u445 003B                        u517 009D  
                      u461 0092                        u390 0033                        u470 00B7  
                      u391 0032                        u527 00D8                        u471 00B6  
                      u537 000E                        u547 0011                        u487 0033  
                      u497 0063                        fsr0 0004               __CFG_FOSC$XT 0000  
             __CFG_LVP$OFF 0000                       ?_ISR 0000                       l1100 0003  
                     l1102 0008                       l1110 002D                       l1040 0005  
                     l1112 0033                       l1104 0019                       l1120 0001  
                     l1050 002C                       l1042 0010                       l1114 0044  
                     l1106 001E                       l1122 0004                       l1130 0017  
                     l1052 0033                       l1044 0017                       l1116 0049  
                     l1108 0024                       l1060 0009                       l1124 0011  
                     l1140 0047                       l1132 001D                       l1054 003A  
                     l1046 001E                       l1038 0001                       l1070 000A  
                     l1118 004F                       l1062 000C                       l1126 0017  
                     l1150 006F                       l1142 004D                       l1134 002B  
                     l1048 0025                       l1072 000D                       l1064 0011  
                     l1056 0000                       l1080 0005                       l1160 0084  
                     l1144 0055                       l1136 003A                       l1128 0000  
                     l1074 0016                       l1066 0001                       l1058 0003  
                     l1090 000E                       l1082 0008                       l1170 0095  
                     l1162 008A                       l1146 005B                       l1138 003F  
                     l1068 0004                       l1092 000F                       l1084 000B  
                     l1076 0000                       l1180 00D0                       l1172 00A3  
                     l1164 0093                       l1156 0071                       l1148 006A  
                     l1094 0010                       l1086 0000                       l1078 0003  
                     l1174 00A8                       l1158 007F                       l1096 0011  
                     l1088 000A                       l1176 00AE                       l1098 0000  
                     l1178 00B7                       STR_1 002B                       STR_2 001F  
                     STR_3 0006                       STR_4 0013                       i1l62 000A  
                     i1l65 0010               __CFG_WRT$OFF 0000          ?_Lcd_Write_String 0000  
                     _main 0000                       btemp 007E                       start 0000* 
       ??_Lcd_Write_String 0005              __CFG_IESO$OFF 0000            __end_of_Lcd_Cmd 001A  
                    ??_ISR 0000                      ?_main 0000              __CFG_WDTE$OFF 0000  
                    _ANSEL 0188                      i1l814 0000                      i1l816 0006  
                    i1l818 0007                      _RCREG 001A                      u14_20 0006  
                    u14_21 0005                      u15_20 0010                      u15_21 000F  
                    _SPBRG 0099                      _PORTA 0005                      _PORTB 0006  
                    _PORTD 0008                      _PORTE 0009    __size_of_Lcd_Set_Cursor 0058  
                    _TRISA 0085                      _TRISB 0086                      _TRISD 0088  
                    _TRISE 0089                      _TXREG 0019             __CFG_FCMEN$OFF 0000  
       __size_of_UART_Init 0015                      _setup 0000                      main@a 0009  
           __CFG_BOREN$OFF 0000                      pclath 000A                      status 0003  
                    wtemp0 007E           __end_of_Lcd_Port 003E             __CFG_MCLRE$OFF 0000  
          __initialization 0000               __end_of_main 00E3                     ??_main 0004  
       __size_of_Lcd_Clear 000D                     ?_setup 0000                     _ANSELH 0189  
                ??_Lcd_Cmd 0003    __size_of_Lcd_Write_Char 0015             __CFG_PWRTE$OFF 0000  
        __end_of_UART_Init 0015                     saved_w 007E            Lcd_Set_Cursor@a 0000  
          Lcd_Set_Cursor@b 0006            Lcd_Set_Cursor@y 0002            Lcd_Set_Cursor@z 0001  
  __end_of__initialization 0001          __end_of_Lcd_Clear 000D             __pcstackCOMMON 0000  
            __end_of_setup 001F             _Lcd_Set_Cursor 0000             _Lcd_Shift_Left 0000* 
                ?_Lcd_Port 0000                    ??_setup 0002                 __pmaintext 0000  
               __pintentry 0000  __size_of_Lcd_Write_String 0025     __end_of_Lcd_Set_Cursor 0058  
        ??_Lcd_Shift_Right 0000                 ??_Lcd_Port 0002                 __stringtab 0000  
           _Lcd_Write_Char 0000                    _Lcd_Cmd 0000            ?_Lcd_Set_Cursor 0006  
                  __ptext1 0000                    __ptext2 0000                    __ptext3 0000  
                  __ptext4 0000                    __ptext5 0000                    __ptext6 0000  
                  __ptext7 0000                    __ptext8 0000                    __ptext9 0000  
             __size_of_ISR 0017                    _counter 0000            ?_Lcd_Shift_Left 0000  
   __end_of_Lcd_Write_Char 0015       end_of_initialization 0001                  _RCSTAbits 0018  
                Lcd_Port@a 0002                  _UART_Init 0000                  _PORTAbits 0005  
                _PORTDbits 0008            ?_Lcd_Write_Char 0000          Lcd_Write_String@a 0007  
        Lcd_Write_String@i 0005                  _TXSTAbits 0098                  _Lcd_Clear 0000  
         _Lcd_Write_String 0000                 ?_UART_Init 0000        start_initialization 0000  
              __end_of_ISR 0017          __size_of_Lcd_Port 003E                 ?_Lcd_Clear 0000  
          _Lcd_Shift_Right 0000*           Lcd_Write_Char@a 0000                __pbssCOMMON 0000  
                ___latbits 0002              __pcstackBANK0 0000                   ?_Lcd_Cmd 0000  
         ??_Lcd_Set_Cursor 0007           ??_Lcd_Shift_Left 0000                ??_UART_Init 0002  
                __pstrings 0000             __size_of_setup 001F          interrupt_function 0000  
                 _PIE1bits 008C                   Lcd_Cmd@a 0005                   _PIR1bits 000C  
              ??_Lcd_Clear 0006                __stringbase 0005           ??_Lcd_Write_Char 0003  
                 _Lcd_Port 0000   __end_of_Lcd_Write_String 0025           __size_of_Lcd_Cmd 001A  
       __end_of__stringtab 0006          __CFG_BOR4V$BOR40V 0000              __size_of_main 00E3  
         ?_Lcd_Shift_Right 0000                 _INTCONbits 000B         Lcd_Write_Char@temp 0004  
                 intlevel1 0000*                 stringcode 0000         Lcd_Set_Cursor@temp 0003  
                 stringdir 0000                   stringtab 0000  
